package com.ruu.freeze.hook;import static com.ruu.freeze.hook.XpUtils.log;import android.os.Build;import de.robv.android.xposed.IXposedHookLoadPackage;import de.robv.android.xposed.XC_MethodReplacement;import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;import com.ruu.freeze.BuildConfig;import com.ruu.freeze.hook.android.ANRHook;import com.ruu.freeze.hook.android.ANRHelperHooks;import com.ruu.freeze.hook.android.ANRErrorStateHook;import com.ruu.freeze.hook.android.BroadHook;import com.ruu.freeze.hook.android.AlarmHook;import com.ruu.freeze.hook.android.BroadCastHook;import com.ruu.freeze.hook.android.FreezeitService;import com.ruu.freeze.hook.android.WakeLockHook;import com.ruu.freeze.hook.app.PowerKeeper;import com.ruu.freeze.hook.Binder.MilletBinderHook;import com.ruu.freeze.hook.android.AnrHookQ;
public class Hook implements IXposedHookLoadPackage {    @Override    public void handleLoadPackage(LoadPackageParam lpParam) {        switch (lpParam.packageName) {            case Enum.Package.self:                XpUtils.hookMethod("Frozen[manager]:", lpParam.classLoader,                        XC_MethodReplacement.returnConstant(true),                        Enum.Class.self, Enum.Method.isXposedActive);                return;            case Enum.Package.android:                hookAndroid(lpParam.classLoader);                return;            case Enum.Package.powerkeeper:                PowerKeeper.Hook(lpParam.classLoader);                return;            default:        }    }    public void hookAndroid(ClassLoader classLoader) {        log("Frozen[Xposed]", BuildConfig.VERSION_NAME);        Config config = new Config();        new FreezeitService(config, classLoader);        new AlarmHook(config, classLoader);        new WakeLockHook(config, classLoader);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {            new BroadHook(classLoader, config);            new ANRHook(classLoader, config);            new ANRHelperHooks(classLoader, config);            new ANRErrorStateHook(classLoader, config);        } else {            new BroadCastHook(config, classLoader);            new AnrHookQ(config,classLoader);        }    }}