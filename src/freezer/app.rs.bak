use std::collections::{HashMap, HashSet};

use anyhow::{Context, Result};
use lazy_static::lazy_static;
use regex::Regex;

lazy_static! {
    static ref PM_REGEX: Regex = Regex::new(r"package:(?<pkg>\S+) uid:(?<uid>\d+)").unwrap();
}

pub struct App {
    packages: HashMap<String, usize>,
    whitelist: HashSet<usize>,
}

impl App {
    pub fn new() -> Result<Self> {
        let path = "/data/system/packages.list";
        let file = std::fs::File::open(path).with_context(|| format!("Failed to open {}", path))?;
        let mut apps = HashMap::new();
        for line in std::io::BufRead::lines(std::io::BufReader::new(file)) {
            let line = line.with_context(|| "Error reading line")?;
            let parts: Vec<&str> = line.split_whitespace().collect();

            if parts.len() < 2 {
                continue;
            }

            let uid = parts[1]
                .parse::<usize>()
                .with_context(|| format!("Invalid UID format: {}", parts[1]))?;

            apps.insert(parts[0].to_string(), uid);
        }
        log::debug!("{:?}", apps);
        Ok(Self {
            packages: apps,
            whitelist: HashSet::new(),
        })
    }

    pub fn contains(&self, package: &str) -> bool {
        self.packages.contains_key(package)
    }

    pub fn get_uid(&self, package: &str) -> usize {
        *self.packages.get(package).unwrap()
    }
    
    pub fn is_whitelist(&self, uid: usize) -> bool {
        self.whitelist.contains(&uid)
    }
}
