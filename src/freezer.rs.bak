use std::{
    collections::{HashMap, HashSet},
    process::Command,
};

lazy_static::lazy_static;! {
    static ref COMPONENT_RE: Regex = Regex::new(r".*\{([^/]+)/").unwrap();
}

pub struct App {
    pub home_package: Option<String>,
    pub packages: HashSet<String>,
    pub uid_map: HashMap<String, u32>,
    pub whitelist: HashSet<u32>,
}

impl App {
    fn has_home_package(&self) -> bool {
        self.home_package.is_some()
    }

    fn update_home_package(&mut self, package: String) {
        self.home_package = Some(package);
    }

    fn contains(&self, package: &str) -> bool {
        self.packages.contains(package)
    }

    fn get_uid(&self, package: &str) -> Option<u32> {
        self.uid_map.get(package).copied()
    }

    fn is_whitelist(&self, uid: u32) -> bool {
        self.whitelist.contains(&uid)
    }
}

pub fn get_visible_app_by_shell(app: &mut App, last_foreground_app: &HashSet<u32>) -> HashSet<u32> {
    let mut cur_foreground_app = HashSet::new();
    let output = Command::new("/system/bin/cmd")
        .args(&["cmd", "activity", "stack", "list"])
        .output()
        .expect("Failed to execute command");
    let stdout = str::from_utf8(&output.stdout).unwrap();
    let mut lines = stdout.lines().peekable();
    while let Some(line) = lines.next() {
        // 处理桌面应用
        if !app.has_home_package() && line.contains("mActivityType=home") {
            if let Some(next_line) = lines.next() {
                if let Some(caps) = COMPONENT_RE.captures(next_line) {
                    let package = caps.get(1).unwrap().as_str();
                    app.update_home_package(package);
                }
            }
        }

        // 处理可见应用
        if line.starts_with("  taskId=") && line.contains("visible=true") {
            if let Some(caps) = COMPONENT_RE.captures(line) {
                let package = caps.get(1).unwrap().as_str();
                if app.contains(package) {
                    let uid = app.get_uid(package);
                    if !app.is_whitelist(uid) {
                        cur_foreground_app.insert(uid);
                    }
                }
            }
        }
    }

    // 处理虚报情况
    if cur_foreground_app.len() >= last_foreground_app.len() + 3 {
        last_foreground_app.clone()
    } else {
        cur_foreground_app
    }
}
